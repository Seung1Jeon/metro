# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

import tkinter as tk
from PIL import Image, ImageTk, ImageDraw, ImageFont
import os
from tkinter import messagebox
from functools import partial
import sys
import os
from tkinter import simpledialog

# 경로 계산 모듈 import를 위한 경로 추가
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# 경로 계산 관련 모듈들 import
from route_finder import find_best_route, recommend_trains_by_segments
from path_utils import split_path_by_line, infer_direction
from timetable_query import get_available_departures
from data_loader import prepare_timetable_long_format_dict, clean_station_name, load_line_station_map
from datetime import datetime, timedelta

IMG_FONT_PATH = "C:\\Windows\\Fonts\\malgun.ttf"

class MainPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.configure(bg="#FFFFFF")
        self.popup_window = None  # 역 클릭 팝업 참조
        self.highlight_circle = None  # 역 하이라이트 원 id
        # 노선별 색상 매핑
        # self.line_colors = {
        #     '1호선': '#E60012',  # 빨간색
        #     '2호선': '#009944',  # 초록색
        #     '3호선': '#FFD400',  # 노란색
        #     '대경선': '#0067B3',  # 파란색
        # }
        # 역 정보 리스트 (좌표, 이름, lines)
        self.stations = [
            # 1호선
            {"name": "설화명곡", "x": 74, "y": 66, "lines": ["1호선"]},
            {"name": "화원", "x": 74, "y": 93, "lines": ["1호선"]},
            {"name": "대곡", "x": 74, "y": 122, "lines": ["1호선"]},
            {"name": "진천", "x": 74, "y": 149, "lines": ["1호선"]},
            {"name": "월배", "x": 75, "y": 178, "lines": ["1호선"]},
            {"name": "상인", "x": 86, "y": 208, "lines": ["1호선"]},
            {"name": "월촌", "x": 105, "y": 234, "lines": ["1호선"]},
            {"name": "송현", "x": 130, "y": 251, "lines": ["1호선"]},
            {"name": "서부정류장", "x": 162, "y": 259, "lines": ["1호선"]},
            {"name": "대명", "x": 206, "y": 260, "lines": ["1호선"]},
            {"name": "안지랑", "x": 251, "y": 260, "lines": ["1호선"]},
            {"name": "현충로", "x": 300, "y": 260, "lines": ["1호선"]},
            {"name": "영대병원", "x": 350, "y": 260, "lines": ["1호선"]},
            {"name": "교대", "x": 399, "y": 260, "lines": ["1호선"]},
            {"name": "명덕", "x": 446, "y": 281, "lines": ["1호선", "3호선"]},
            {"name": "반월당", "x": 487, "y": 388, "lines": ["1호선", "2호선"]},
            {"name": "중앙로", "x": 487, "y": 431, "lines": ["1호선"]},
            {"name": "대구역", "x": 487, "y": 465, "lines": ["1호선", "대경선"]},
            {"name": "칠성시장", "x": 487, "y": 499, "lines": ["1호선"]},
            {"name": "신천", "x": 494, "y": 530, "lines": ["1호선"]},
            {"name": "동대구역", "x": 513, "y": 559, "lines": ["1호선", "대경선"]},
            {"name": "동구청", "x": 538, "y": 578, "lines": ["1호선"]},
            {"name": "아양교", "x": 579, "y": 589, "lines": ["1호선"]},
            {"name": "동촌", "x": 625, "y": 590, "lines": ["1호선"]},
            {"name": "해안", "x": 662, "y": 590, "lines": ["1호선"]},
            {"name": "방촌", "x": 697, "y": 590, "lines": ["1호선"]},
            {"name": "용계", "x": 731, "y": 589, "lines": ["1호선"]},
            {"name": "신기", "x": 795, "y": 620, "lines": ["1호선"]},
            {"name": "반야월", "x": 813, "y": 647, "lines": ["1호선"]},
            {"name": "각산", "x": 820, "y": 674, "lines": ["1호선"]},
            {"name": "안심", "x": 820, "y": 700, "lines": ["1호선"]},
            {"name": "대구한의대병원", "x": 820, "y": 726, "lines": ["1호선"]},
            {"name": "부호", "x": 820, "y": 751, "lines": ["1호선"]},
            {"name": "하양", "x": 820, "y": 777, "lines": ["1호선"]},
            # 2호선
            {"name": "문양", "x": 75, "y": 300, "lines": ["2호선"]},
            {"name": "다사", "x": 75, "y": 330, "lines": ["2호선"]},
            {"name": "대실", "x": 75, "y": 359, "lines": ["2호선"]},
            {"name": "강창", "x": 83, "y": 380, "lines": ["2호선"]},
            {"name": "계명대", "x": 104, "y": 385, "lines": ["2호선"]},
            {"name": "성서산업단지", "x": 136, "y": 385, "lines": ["2호선"]},
            {"name": "이곡", "x": 169, "y": 385, "lines": ["2호선"]},
            {"name": "용산", "x": 204, "y": 385, "lines": ["2호선"]},
            {"name": "죽전", "x": 244, "y": 385, "lines": ["2호선"]},
            {"name": "감삼", "x": 278, "y": 385, "lines": ["2호선"]},
            {"name": "두류", "x": 316, "y": 385, "lines": ["2호선"]},
            {"name": "내당", "x": 352, "y": 385, "lines": ["2호선"]},
            {"name": "반고개", "x": 382, "y": 385, "lines": ["2호선"]},
            {"name": "청라언덕", "x": 409, "y": 385, "lines": ["2호선", "3호선"]},
            {"name": "경대병원", "x": 555, "y": 385, "lines": ["2호선"]},
            {"name": "대구은행", "x": 593, "y": 385, "lines": ["2호선"]},
            {"name": "범어", "x": 631, "y": 385, "lines": ["2호선"]},
            {"name": "수성구청", "x": 670, "y": 385, "lines": ["2호선"]},
            {"name": "만촌", "x": 708, "y": 385, "lines": ["2호선"]},
            {"name": "담티", "x": 747, "y": 385, "lines": ["2호선"]},
            {"name": "연호", "x": 785, "y": 385, "lines": ["2호선"]},
            {"name": "수성알파시티", "x": 825, "y": 410, "lines": ["2호선"]},
            {"name": "고산", "x": 826, "y": 437, "lines": ["2호선"]},
            {"name": "신매", "x": 825, "y": 464, "lines": ["2호선"]},
            {"name": "사월", "x": 825, "y": 490, "lines": ["2호선"]},
            {"name": "정평", "x": 825, "y": 517, "lines": ["2호선"]},
            {"name": "임당", "x": 825, "y": 544, "lines": ["2호선"]},
            {"name": "영남대", "x": 825, "y": 571, "lines": ["2호선"]},
            # 3호선
            {"name": "용지", "x": 821, "y": 67, "lines": ["3호선"]},
            {"name": "범물", "x": 821, "y": 99, "lines": ["3호선"]},
            {"name": "지산", "x": 821, "y": 135, "lines": ["3호선"]},
            {"name": "수성못", "x": 821, "y": 171, "lines": ["3호선"]},
            {"name": "황금", "x": 807, "y": 215, "lines": ["3호선"]},
            {"name": "어린이세상", "x": 777, "y": 245, "lines": ["3호선"]},
            {"name": "수성구민운동장", "x": 735, "y": 260, "lines": ["3호선"]},
            {"name": "수성시장", "x": 656, "y": 260, "lines": ["3호선"]},
            {"name": "대봉교", "x": 578, "y": 260, "lines": ["3호선"]},
            {"name": "건들바위", "x": 499, "y": 260, "lines": ["3호선"]},
            {"name": "남산", "x": 413, "y": 329, "lines": ["3호선"]},
            {"name": "서문시장", "x": 409, "y": 433, "lines": ["3호선"]},
            {"name": "달성공원", "x": 409, "y": 485, "lines": ["3호선"]},
            {"name": "북구청", "x": 404, "y": 523, "lines": ["3호선"]},
            {"name": "원대", "x": 388, "y": 553, "lines": ["3호선"]},
            {"name": "팔달시장", "x": 362, "y": 575, "lines": ["3호선"]},
            {"name": "만평", "x": 328, "y": 588, "lines": ["3호선"]},
            {"name": "공단", "x": 294, "y": 590, "lines": ["3호선"]},
            {"name": "팔달", "x": 260, "y": 590, "lines": ["3호선"]},
            {"name": "매천시장", "x": 226, "y": 590, "lines": ["3호선"]},
            {"name": "매천", "x": 192, "y": 590, "lines": ["3호선"]},
            {"name": "태전", "x": 158, "y": 590, "lines": ["3호선"]},
            {"name": "구암", "x": 108, "y": 614, "lines": ["3호선"]},
            {"name": "칠곡운암", "x": 81, "y": 654, "lines": ["3호선"]},
            {"name": "동천", "x": 75, "y": 689, "lines": ["3호선"]},
            {"name": "팔거", "x": 75, "y": 721, "lines": ["3호선"]},
            {"name": "학정", "x": 75, "y": 753, "lines": ["3호선"]},
            {"name": "칠곡경대병원", "x": 75, "y": 779, "lines": ["3호선"]},
            # 대경선
            {"name": "구미", "x": 110, "y": 467, "lines": ["대경선"]},
            {"name": "사곡", "x": 165, "y": 467, "lines": ["대경선"]},
            {"name": "왜관", "x": 264, "y": 467, "lines": ["대경선"]},
            {"name": "서대구역", "x": 366, "y": 467, "lines": ["대경선"]},
            {"name": "경산", "x": 504, "y": 778, "lines": ["대경선"]},
        ]
        canvas = tk.Canvas(self, bg="#FFFFFF", height=960, width=540, bd=0, highlightthickness=0, relief="ridge")
        canvas.place(x=0, y=0)

        # input-search.png + 텍스트
        input_search_img = Image.open("build/images/input-search.png").resize((437, 48))
        draw = ImageDraw.Draw(input_search_img)
        try:
            font = ImageFont.truetype(IMG_FONT_PATH, 18)
        except:
            font = ImageFont.load_default()
        text = "전철역 검색"
        text_color = "#bbbbbb"
        bbox = draw.textbbox((0, 0), text, font=font)
        text_height = bbox[3] - bbox[1]
        text_y = (input_search_img.height - text_height) // 2 - bbox[1]
        draw.text((20, text_y), text, font=font, fill=text_color)
        self.input_search_img_tk = ImageTk.PhotoImage(input_search_img)
        input_search_img_id = canvas.create_image(22, 13, anchor="nw", image=self.input_search_img_tk)
        # '전철역 검색' 영역 클릭 시 FourthPage로 이동
        def go_to_fourth_page(event=None):
            controller.show_frame("FourthPage")
            # FourthPage의 검색창에 바로 focus
            controller.frames["FourthPage"].search_entry.focus_set()
        canvas.tag_bind(input_search_img_id, '<Button-1>', go_to_fourth_page)

        # location-search.png
        location_search_img = Image.open("build/images/location-search.png").resize((48, 48))
        self.location_search_img_tk = ImageTk.PhotoImage(location_search_img)
        location_search_img_id = canvas.create_image(469, 13, anchor="nw", image=self.location_search_img_tk)
        def go_to_second(event=None):
            controller.show_frame("SecondPage")
        canvas.tag_bind(location_search_img_id, '<Button-1>', go_to_second)

        # footer
        footer_img = Image.open("build/images/footer.png").resize((540, 46))
        self.footer_img_tk = ImageTk.PhotoImage(footer_img)
        canvas.create_image(0, 914, anchor="nw", image=self.footer_img_tk)

        # 노선도 이미지 영역
        img_frame = tk.Frame(self, width=540, height=845, bg="#FFFFFF")
        img_frame.place(x=0, y=69)
        self.img_canvas = tk.Canvas(img_frame, width=540, height=845, bg="#FFFFFF", bd=0, highlightthickness=0)
        self.img_canvas.pack(side="left", fill="both", expand=True)
        h_scroll = tk.Scrollbar(img_frame, orient="horizontal", command=self.img_canvas.xview)
        h_scroll.pack(side="bottom", fill="x")
        self.img_canvas.configure(xscrollcommand=h_scroll.set)
        orig_img = Image.open("build/images/main.png")
        img_w, img_h = 897, 845
        self.cur_scale = 1.0
        img = orig_img.resize((img_w, img_h))
        self.img_tk = ImageTk.PhotoImage(img)
        img_id = self.img_canvas.create_image(0, 0, anchor="nw", image=self.img_tk)
        self.img_canvas.config(scrollregion=(0, 0, img_w, img_h))
        self.img_canvas.image = self.img_tk
        def on_click(event):
            self.img_canvas.scan_mark(event.x, event.y)
        def on_drag(event):
            self.img_canvas.scan_dragto(event.x, event.y, gain=1)
        self.img_canvas.tag_bind(img_id, "<ButtonPress-1>", on_click)
        self.img_canvas.tag_bind(img_id, "<B1-Motion>", on_drag)
        def on_zoom(event):
            # ctrl키가 눌렸는지 체크 (Windows/Linux/Mac 모두 지원)
            ctrl_pressed = (event.state & 0x4) != 0 or (event.state & 0x0004) != 0
            if ctrl_pressed:
                if hasattr(event, 'delta'):
                    if event.delta > 0:
                        self.cur_scale *= 1.1
                    else:
                        self.cur_scale /= 1.1
                elif hasattr(event, 'num'):
                    if event.num == 4:
                        self.cur_scale *= 1.1
                    elif event.num == 5:
                        self.cur_scale /= 1.1
                self.cur_scale = max(0.3, min(self.cur_scale, 3.0))
                new_w = int(img_w * self.cur_scale)
                new_h = int(img_h * self.cur_scale)
                img2 = orig_img.resize((new_w, new_h))
                self.img_tk = ImageTk.PhotoImage(img2)
                self.img_canvas.itemconfig(img_id, image=self.img_tk)
                self.img_canvas.config(scrollregion=(0, 0, new_w, new_h))
                self.img_canvas.image = self.img_tk
        # 바인딩 (OS별)
        self.img_canvas.bind("<MouseWheel>", on_zoom)   # Windows/Mac
        self.img_canvas.bind("<Button-4>", on_zoom)     # Linux
        self.img_canvas.bind("<Button-5>", on_zoom)     # Linux

        # 좌표 출력 및 역 판정
        self.on_img_canvas_click = self.on_img_canvas_click
        self.img_canvas.bind("<Button-1>", self.on_img_canvas_click)

    def show_station_popup(self, canvas, x, y, station_name):
        if self.popup_window and hasattr(self, 'popup_canvas') and self.popup_canvas:
            self.popup_canvas.delete(self.popup_window)
            self.popup_window = None
        self.popup_canvas = canvas

        # 원하는 팝업/배경 이미지 크기 지정
        popup_bg_width = 220  # 원하는 가로 크기(px)
        popup_bg_height = 120 # 원하는 세로 크기(px)

        # 배경 이미지 리사이즈 및 캔버스 크기 맞춤
        popup_bg_img = Image.open("build/images/popup-bg.png").resize((popup_bg_width, popup_bg_height))
        self.popup_bg_img_tk = ImageTk.PhotoImage(popup_bg_img)
        popup_canvas = tk.Canvas(canvas, width=popup_bg_width, height=popup_bg_height, highlightthickness=0, bd=0, bg='white')
        popup_canvas.create_image(popup_bg_width//2, popup_bg_height//2, image=self.popup_bg_img_tk)

        # 버튼 크기/간격/좌표 계산 (예시)
        btn_width, btn_height = 200, 30
        gap = 8
        btn_count = 3
        btn_total_height = btn_count * btn_height + (btn_count - 1) * gap
        x_offset = (popup_bg_width - btn_width) // 2
        y1 = (popup_bg_height - btn_total_height) // 2
        y2 = y1 + btn_height + gap
        y3 = y2 + btn_height + gap

        btn_img = ImageTk.PhotoImage(Image.open("build/images/popup-btn.png").resize((btn_width, btn_height)))
        self.btn_img_tk = btn_img
        # 버튼1
        btn1_img = popup_canvas.create_image(x_offset + btn_width//2, y1 + btn_height//2, image=self.btn_img_tk)
        btn1_text = popup_canvas.create_text(x_offset + btn_width//2, y1 + btn_height//2, text=f"{station_name}(역)을 출발지로 설정", fill="white", font=("Malgun Gothic", 9))
        # 버튼2
        btn2_img = popup_canvas.create_image(x_offset + btn_width//2, y2 + btn_height//2, image=self.btn_img_tk)
        btn2_text = popup_canvas.create_text(x_offset + btn_width//2, y2 + btn_height//2, text=f"{station_name}(역)을 도착지로 설정", fill="white", font=("Malgun Gothic", 9))
        # 버튼3
        btn3_img = popup_canvas.create_image(x_offset + btn_width//2, y3 + btn_height//2, image=self.btn_img_tk)
        btn3_text = popup_canvas.create_text(x_offset + btn_width//2, y3 + btn_height//2, text=f"{station_name}(역) 즐겨찾기", fill="white", font=("Malgun Gothic", 9))
        # 클릭 이벤트 연결
        def btn1_cmd(event=None): self.set_departure_and_close(station_name)
        def btn2_cmd(event=None): self.set_arrival_and_close(station_name)
        def btn3_cmd(event=None): self.add_favorite_and_close(station_name)
        for tag in [btn1_img, btn1_text]:
            popup_canvas.tag_bind(tag, '<Button-1>', btn1_cmd)
        for tag in [btn2_img, btn2_text]:
            popup_canvas.tag_bind(tag, '<Button-1>', btn2_cmd)
        for tag in [btn3_img, btn3_text]:
            popup_canvas.tag_bind(tag, '<Button-1>', btn3_cmd)
        self.popup_window = canvas.create_window(x, y, window=popup_canvas, anchor="nw", width=popup_bg_width, height=popup_bg_height)

        def close_popup(event=None):
            if self.popup_window and hasattr(self, 'popup_canvas') and self.popup_canvas:
                self.popup_canvas.delete(self.popup_window)
                self.popup_window = None
            if hasattr(self, 'popup_bind_id') and self.popup_bind_id:
                canvas.unbind("<Button-1>", self.popup_bind_id)
                self.popup_bind_id = None
            if event and hasattr(event.widget, 'find_withtag'):
                self.on_img_canvas_click(event)
        self.popup_bind_id = canvas.bind("<Button-1>", close_popup, add='+')

    def set_departure_and_close(self, station_name):
        if hasattr(self, 'popup_window') and self.popup_window and hasattr(self, 'popup_canvas') and self.popup_canvas:
            self.popup_canvas.delete(self.popup_window)
            self.popup_window = None
        if self.controller.arrival_station == station_name:
            messagebox.showinfo("알림", "출발지와 도착지가 동일합니다!")
            return
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.arrival_station = None
            self.controller.frames["SecondPage"].update_arrival_text()
            self.after(0, lambda: self.controller.show_frame("SecondPage"))
            return
        self.controller.set_departure_station(station_name)
        self.controller.is_selecting_departure = False
        self.controller.is_selecting_arrival = False
        if self.controller.departure_station and self.controller.arrival_station:
            return
        self.controller.show_frame("SecondPage")

    def set_arrival_and_close(self, station_name):
        if hasattr(self, 'popup_window') and self.popup_window and hasattr(self, 'popup_canvas') and self.popup_canvas:
            self.popup_canvas.delete(self.popup_window)
            self.popup_window = None
        if self.controller.departure_station == station_name:
            messagebox.showinfo("알림", "출발지와 도착지가 동일합니다!")
            return
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.departure_station = None
            self.controller.frames["SecondPage"].update_departure_text()
            self.after(0, lambda: self.controller.show_frame("SecondPage"))
            return
        self.controller.set_arrival_station(station_name)
        self.controller.is_selecting_arrival = False
        self.controller.is_selecting_departure = False
        if self.controller.departure_station and self.controller.arrival_station:
            return
        self.controller.show_frame("SecondPage")
    def add_favorite_and_close(self, station_name):
        if hasattr(self, 'popup_window') and self.popup_window and hasattr(self, 'popup_canvas') and self.popup_canvas:
            self.popup_canvas.delete(self.popup_window)
            self.popup_window = None
        # 즐겨찾기 추가 (중복 없이, 최근 추가가 앞으로, 최대 5개)
        favs = self.controller.favorites
        if station_name in favs:
            favs.remove(station_name)
        favs.insert(0, station_name)
        if len(favs) > 4:
            favs.pop()
        self.controller.frames["SecondPage"].render_favorites()

    def reset_popup_state(self):
        if hasattr(self, 'popup_window') and self.popup_window and hasattr(self, 'popup_canvas') and self.popup_canvas:
            self.popup_canvas.delete(self.popup_window)
        if hasattr(self, 'popup_canvas') and hasattr(self, 'popup_bind_id'):
            if self.popup_canvas and self.popup_bind_id:
                self.popup_canvas.unbind("<Button-1>", self.popup_bind_id)
        self.popup_window = None
        self.popup_canvas = None
        self.popup_bind_id = None

    def on_img_canvas_click(self, event):
        real_x = event.widget.canvasx(event.x)
        real_y = event.widget.canvasy(event.y)
        orig_x = real_x / self.cur_scale
        orig_y = real_y / self.cur_scale
        for station in self.stations:
            # 대구역, 동대구역은 lines를 1호선만 취급
            if station["name"] in ["대구역", "동대구역"]:
                station["lines"] = ["1호선"]
            if abs(orig_x - station["x"]) < 15 and abs(orig_y - station["y"]) < 15:
                # 대경선 역 클릭 시 안내 메시지 및 클릭 막기
                if '대경선' in station.get('lines', []):
                    messagebox.showinfo("알림", "대경선은 업데이트 예정입니다.")
                    return
                # 출발/도착지 선택 모드면 기존 로직
                if self.controller.is_selecting_departure:
                    if self.controller.arrival_station == station['name']:
                        messagebox.showinfo("알림", "출발지와 도착지가 동일합니다!")
                        return
                    self.controller.set_departure_station(station['name'])
                    self.controller.is_selecting_departure = False
                    self.controller.is_selecting_arrival = False
                    # 출발지/도착지가 모두 지정된 경우에는 SecondPage로 이동하지 않음
                    if not (self.controller.departure_station and self.controller.arrival_station):
                        self.controller.show_frame("SecondPage")
                    return
                elif self.controller.is_selecting_arrival:
                    if self.controller.departure_station == station['name']:
                        messagebox.showinfo("알림", "출발지와 도착지가 동일합니다!")
                        return
                    self.controller.set_arrival_station(station['name'])
                    self.controller.is_selecting_arrival = False
                    self.controller.is_selecting_departure = False
                    if not (self.controller.departure_station and self.controller.arrival_station):
                        self.controller.show_frame("SecondPage")
                    return
                # 선택 모드가 아니면 팝업 띄우기
                self.show_station_popup(event.widget, real_x, real_y, station['name'])
                return
        # 역이 아닌 곳 클릭 시 팝업 닫기
        if self.popup_window and hasattr(self, 'popup_canvas') and self.popup_canvas:
            self.popup_canvas.delete(self.popup_window)
            self.popup_window = None

    def focus_station_by_name(self, name):
        # 해당 역 좌표로 이동 및 확대, 빨간 원 표시
        for st in self.stations:
            if st["name"] == name:
                x, y = st["x"], st["y"]
                # 확대(zoom) 적용
                self.cur_scale = 2.0
                img_w, img_h = 897, 845
                orig_img = Image.open("build/images/main.png")
                new_w = int(img_w * self.cur_scale)
                new_h = int(img_h * self.cur_scale)
                img2 = orig_img.resize((new_w, new_h))
                self.img_tk = ImageTk.PhotoImage(img2)
                self.img_canvas.itemconfig(1, image=self.img_tk)
                self.img_canvas.config(scrollregion=(0, 0, new_w, new_h))
                self.img_canvas.image = self.img_tk
                # 좌표를 스케일에 맞게 변환
                sx = x * self.cur_scale
                sy = y * self.cur_scale
                # 캔버스 중앙에 해당 역이 오도록 스크롤 이동
                cx = max(sx - 540//2, 0)
                cy = max(sy - 845//2, 0)
                self.img_canvas.xview_moveto(cx / (new_w if new_w > 0 else 1))
                self.img_canvas.yview_moveto(cy / (new_h if new_h > 0 else 1))
                # 기존 원 삭제
                if self.highlight_circle:
                    self.img_canvas.delete(self.highlight_circle)
                # 빨간 원 그리기(반지름 18)
                r = 18
                self.highlight_circle = self.img_canvas.create_oval(
                    sx - r, sy - r, sx + r, sy + r,
                    outline="#6a66ff", width=4
                )
                break

class SecondPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.recent_searches = []  # 최근검색 리스트
        self.canvas = tk.Canvas(self, bg="#FFFFFF", height=960, width=540, bd=0, highlightthickness=0, relief="ridge")
        self.canvas.place(x=0, y=0)
        self.canvas.create_rectangle(0.0, 0.0, 540.0, 128.0, fill="#6A66FF", outline="")
        self.input_origin_img_tk = ImageTk.PhotoImage(Image.open("build/images/input-origin.png").resize((int(515.0-25.0), int(52.0-23.0))))
        input_origin_img_id = self.canvas.create_image(25.0, 23.0, anchor="nw", image=self.input_origin_img_tk)
        self.input_destination_img_tk = ImageTk.PhotoImage(Image.open("build/images/input-destination.png").resize((int(515.0-25.0), int(84.0-55.0))))
        input_destination_img_id = self.canvas.create_image(25.0, 55.0, anchor="nw", image=self.input_destination_img_tk)
        self.footer2_img_tk = ImageTk.PhotoImage(Image.open("build/images/footer2.png").resize((540, 67)))
        self.canvas.create_image(0, 893, anchor="nw", image=self.footer2_img_tk)
        self.canvas.create_text(15.0, 98.0, anchor="nw", text="즐겨찾기", fill="#FFFFFF", font=("Malgun Gothic", 14 * -1))
        self.fav_icon_img_tk = ImageTk.PhotoImage(Image.open("build/images/subway-icon.png").resize((14, 15)))
        self.fav_items = []  # 즐겨찾기 캔버스 아이템 id 리스트
        self.departure_text_id = self.canvas.create_text(33.0, 29.0, anchor="nw", text="출발지 입력", fill="#FFFFFF", font=("Malgun Gothic", 14 * -1))
        self.arrival_text_id = self.canvas.create_text(33.0, 61.0, anchor="nw", text="도착지 입력", fill="#FFFFFF", font=("Malgun Gothic", 14 * -1))
        # 출발지 입력 이미지와 텍스트 모두 클릭 시 MainPage로 이동(출발지 선택 모드)
        def go_to_main_departure(event=None):
            # 출발지/도착지 모두 지정된 상태라면 도착지 초기화
            if controller.departure_station and controller.arrival_station:
                controller.arrival_station = None
                self.update_arrival_text()
            controller.is_selecting_departure = True
            controller.is_selecting_arrival = False
            controller.show_frame("MainPage")
        self.canvas.tag_bind(input_origin_img_id, '<Button-1>', go_to_main_departure)
        self.canvas.tag_bind(self.departure_text_id, '<Button-1>', go_to_main_departure)
        # 도착지 입력 이미지와 텍스트 모두 클릭 시 MainPage로 이동(도착지 선택 모드)
        def go_to_main_arrival(event=None):
            # 출발지/도착지 모두 지정된 상태라면 출발지 초기화
            if controller.departure_station and controller.arrival_station:
                controller.departure_station = None
                self.update_departure_text()
            controller.is_selecting_arrival = True
            controller.is_selecting_departure = False
            controller.show_frame("MainPage")
        self.canvas.tag_bind(input_destination_img_id, '<Button-1>', go_to_main_arrival)
        self.canvas.tag_bind(self.arrival_text_id, '<Button-1>', go_to_main_arrival)
        # x-icon 클릭 시 MainPage로 이동(선택 모드 없음)
        def go_to_main_normal(event=None):
            controller.is_selecting_arrival = False
            controller.is_selecting_departure = False
            controller.show_frame("MainPage")
        # subway-icon.png로 대체
        self.canvas.create_text(15.0, 151.0, anchor="nw", text="최근검색", fill="#000000", font=("Malgun Gothic", 16 * -1))
        # 최근검색 아이템 영역 시작 y좌표
        self.recent_y_start = 186
        self.recent_items = []  # 캔버스 아이템 id 리스트
        # search-icon.png 로드
        search_icon_img = Image.open("build/images/search-icon.png").resize((18, 18))
        self.search_icon_img_tk = ImageTk.PhotoImage(search_icon_img)
        # 히스토리 삭제 텍스트 추가 (초기 y좌표는 최근검색 리스트 렌더링 후에 위치시킴)
        self.history_delete_id = None
        self.render_recent_searches()
        # 닫기(x) 아이콘 추가 (오른쪽 상단)
        x_icon_img = Image.open("build/images/x-icon.png").resize((10, 10))
        self.x_icon_img_tk = ImageTk.PhotoImage(x_icon_img)
        x_icon_id = self.canvas.create_image(520, 10, anchor="nw", image=self.x_icon_img_tk)
        self.canvas.tag_bind(x_icon_id, '<Button-1>', go_to_main_normal) # x-icon 클릭 시 선택 모드 없이 MainPage로 이동
        self.render_favorites()
        # 즐겨찾기 클릭 판정용 바인딩
        self.canvas.bind('<Button-1>', self.on_fav_click)

    def add_recent_search(self, dep, arr):
        if not dep or not arr:
            return
        pair = (dep, arr)
        if pair in self.recent_searches:
            self.recent_searches.remove(pair)
        self.recent_searches.insert(0, pair)
        self.render_recent_searches()

    def render_recent_searches(self):
        # 기존 아이템 삭제
        for item in getattr(self, 'recent_items', []):
            self.canvas.delete(item)
        self.recent_items = []
        # 히스토리 삭제 텍스트도 삭제
        if self.history_delete_id:
            self.canvas.delete(self.history_delete_id)
            self.history_delete_id = None
        y = self.recent_y_start
        for dep, arr in self.recent_searches:
            icon_id = self.canvas.create_image(15, y, anchor="nw", image=self.search_icon_img_tk)
            # 출발지 텍스트 길이 측정
            try:
                font_pil = ImageFont.truetype(IMG_FONT_PATH, 14)
                dep_width = font_pil.getlength(dep)
            except Exception:
                dep_width = len(dep) * 14  # fallback
            dep_x = 41.0
            arrow_x = dep_x + dep_width + 8  # dep 뒤 8px 띄우기
            arr_x = arrow_x + 18  # 화살표 뒤 18px 띄우기
            text_id1 = self.canvas.create_text(dep_x, y, anchor="nw", text=dep, fill="#000000", font=("Malgun Gothic", 14 * -1))
            arrow_id = self.canvas.create_text(arrow_x, y, anchor="nw", text="→", fill="#BBBBBB", font=("Malgun Gothic", 14 * -1))
            text_id2 = self.canvas.create_text(arr_x, y, anchor="nw", text=arr, fill="#000000", font=("Malgun Gothic", 14 * -1))
            self.recent_items.extend([icon_id, text_id1, arrow_id, text_id2])
            # 클릭 이벤트 바인딩
            def on_recent_click(event, dep=dep, arr=arr):
                self.controller.set_departure_station(dep)
                self.controller.set_arrival_station(arr)
                self.controller.show_frame("ThirdPage")
            for item_id in [icon_id, text_id1, arrow_id, text_id2]:
                self.canvas.tag_bind(item_id, '<Button-1>', on_recent_click)
            y += 32
        # 최근검색이 있을 때만 히스토리 삭제 텍스트 추가
        if self.recent_searches:
            self.history_delete_id = self.canvas.create_text(229.0, y, anchor="nw", text="히스토리 삭제", fill="#6A66FF", font=("Malgun Gothic", 14 * -1))
            self.canvas.tag_bind(self.history_delete_id, '<Button-1>', self.clear_recent_searches)

    def clear_recent_searches(self, event=None):
        self.recent_searches = []
        self.render_recent_searches()

    def update_departure_text(self):
        dep = self.controller.departure_station
        if dep:
            self.canvas.itemconfig(self.departure_text_id, text=f"출발지: {dep}")
        else:
            self.canvas.itemconfig(self.departure_text_id, text="출발지 입력")
        arr = self.controller.arrival_station
        if dep and arr:
            self.add_recent_search(dep, arr)
            self.controller.show_frame("ThirdPage")

    def update_arrival_text(self):
        arr = self.controller.arrival_station
        if arr:
            self.canvas.itemconfig(self.arrival_text_id, text=f"도착지: {arr}")
        else:
            self.canvas.itemconfig(self.arrival_text_id, text="도착지 입력")
        dep = self.controller.departure_station
        if dep and arr:
            self.add_recent_search(dep, arr)
            self.controller.show_frame("ThirdPage")

    def render_favorites(self):
        # 기존 즐겨찾기 아이템 삭제
        for item in getattr(self, 'fav_items', []):
            self.canvas.delete(item)
        self.fav_items = []
        x = 110  # '즐겨찾기' 텍스트 오른쪽
        y = 98
        self._fav_hitboxes = []  # (x1, y1, x2, y2, fav) 리스트
        for fav in self.controller.favorites:
            text_w = len(fav) * 14
            icon_id = self.canvas.create_image(x, y+2, anchor="nw", image=self.fav_icon_img_tk)
            text_id = self.canvas.create_text(x+20, y, anchor="nw", text=fav, fill="#FFFFFF", font=("Malgun Gothic", 14 * -1))
            self.fav_items.extend([icon_id, text_id])
            self._fav_hitboxes.append((x, y, x+20+text_w, y+22, fav))
            x += 20 + text_w + 30  # 아이콘+텍스트+여백(더 넓게)

    def on_fav_click(self, event):
        # 즐겨찾기 hitbox 내 클릭 시 팝업
        if not hasattr(self, '_fav_hitboxes'):
            return
        for x1, y1, x2, y2, fav in self._fav_hitboxes:
            if x1 <= event.x <= x2 and y1 <= event.y <= y2:
                self.show_fav_popup(x1+20, y1+24, fav)
                return

    def show_fav_popup(self, x, y, station_name, event=None):
        # 팝업이 화면 밖으로 나가지 않도록 x좌표 보정 및 y좌표 위로 10만큼 띄움
        popup_bg_width = 220
        popup_bg_height = 88
        btn_width, btn_height = 200, 30
        gap = 8
        btn_count = 2
        btn_total_height = btn_count * btn_height + (btn_count - 1) * gap
        x_offset = (popup_bg_width - btn_width) // 2
        y1 = (popup_bg_height - btn_total_height) // 2
        y2 = y1 + btn_height + gap

        # y좌표 위로 10만큼 이동, 최소 0 보장
        y = max(0, y + 10)

        # 배경 이미지
        popup_bg_img = Image.open("build/images/popup-bg.png").resize((popup_bg_width, popup_bg_height))
        self.fav_popup_bg_img_tk = ImageTk.PhotoImage(popup_bg_img)
        popup_canvas = tk.Canvas(self.canvas, width=popup_bg_width, height=popup_bg_height, highlightthickness=0, bd=0, bg='white')
        popup_canvas.create_image(popup_bg_width//2, popup_bg_height//2, image=self.fav_popup_bg_img_tk)

        # 버튼 이미지
        btn_img = ImageTk.PhotoImage(Image.open("build/images/popup-btn.png").resize((btn_width, btn_height)))
        self.fav_btn_img_tk = btn_img
        # 버튼1
        btn1_img = popup_canvas.create_image(x_offset + btn_width//2, y1 + btn_height//2, image=self.fav_btn_img_tk)
        btn1_text = popup_canvas.create_text(x_offset + btn_width//2, y1 + btn_height//2, text=f"{station_name}(역)을 출발지로 설정", fill="white", font=("Malgun Gothic", 9))
        # 버튼2
        btn2_img = popup_canvas.create_image(x_offset + btn_width//2, y2 + btn_height//2, image=self.fav_btn_img_tk)
        btn2_text = popup_canvas.create_text(x_offset + btn_width//2, y2 + btn_height//2, text=f"{station_name}(역)을 도착지로 설정", fill="white", font=("Malgun Gothic", 9))

        # 클릭 이벤트 연결
        def btn1_cmd(event=None): self.set_departure_from_fav(station_name)
        def btn2_cmd(event=None): self.set_arrival_from_fav(station_name)
        for tag in [btn1_img, btn1_text]:
            popup_canvas.tag_bind(tag, '<Button-1>', btn1_cmd)
        for tag in [btn2_img, btn2_text]:
            popup_canvas.tag_bind(tag, '<Button-1>', btn2_cmd)

        # 기존 팝업 닫기
        if hasattr(self, 'fav_popup_window') and self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
            self.fav_popup_canvas.delete(self.fav_popup_window)
            self.fav_popup_window = None
        self.fav_popup_canvas = self.canvas
        self.fav_popup_window = self.canvas.create_window(x, y, window=popup_canvas, anchor="nw", width=popup_bg_width, height=popup_bg_height)

        def close_popup(event=None):
            if self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
                self.fav_popup_canvas.delete(self.fav_popup_window)
                self.fav_popup_window = None
            if hasattr(self, 'fav_popup_bind_id') and self.fav_popup_bind_id:
                self.canvas.unbind("<Button-1>", self.fav_popup_bind_id)
                self.fav_popup_bind_id = None
            # 즐겨찾기 클릭 바인딩 복구
            self.canvas.bind('<Button-1>', self.on_fav_click)
        self.fav_popup_bind_id = self.canvas.bind("<Button-1>", close_popup, add='+')

    def set_departure_from_fav(self, station_name):
        # 출발지/도착지 모두 지정되어 있으면 도착지 초기화
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.set_arrival_station(None)
        # 도착지와 동일한 역이면 경고
        if self.controller.arrival_station == station_name:
            messagebox.showinfo("알림", "출발지와 도착지가 동일합니다!")
            return
        self.controller.set_departure_station(station_name)
        self.controller.is_selecting_departure = False
        self.controller.is_selecting_arrival = False
        # 팝업 닫기
        if hasattr(self, 'fav_popup_window') and self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
            self.fav_popup_canvas.delete(self.fav_popup_window)
            self.fav_popup_window = None
        # 페이지 전환 분기
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.show_frame("ThirdPage")
        else:
            self.controller.show_frame("SecondPage")
    def set_arrival_from_fav(self, station_name):
        # 출발지/도착지 모두 지정되어 있으면 출발지 초기화
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.set_departure_station(None)
        # 출발지와 동일한 역이면 경고
        if self.controller.departure_station == station_name:
            messagebox.showinfo("알림", "출발지와 도착지가 동일합니다!")
            return
        self.controller.set_arrival_station(station_name)
        self.controller.is_selecting_arrival = False
        self.controller.is_selecting_departure = False
        # 출발지와 도착지가 모두 지정된 경우 ThirdPage로 이동
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.show_frame("ThirdPage")
        else:
            self.controller.show_frame("SecondPage")

    def close_fav_popup(self):
        if hasattr(self, 'fav_popup_window') and self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
            self.fav_popup_canvas.delete(self.fav_popup_window)
            self.fav_popup_window = None

class ThirdPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.canvas = tk.Canvas(self, bg="#FFFFFF", height=960, width=540, bd=0, highlightthickness=0, relief="ridge")
        self.canvas.place(x=0, y=0)
        self.canvas.create_rectangle(0.0, 0.0, 540.0, 128.0, fill="#6A66FF", outline="")
        self.input_origin_img_tk = ImageTk.PhotoImage(Image.open("build/images/input-origin.png").resize((int(515.0-25.0), int(52.0-23.0))))
        input_origin_img_id = self.canvas.create_image(25.0, 23.0, anchor="nw", image=self.input_origin_img_tk)
        self.input_destination_img_tk = ImageTk.PhotoImage(Image.open("build/images/input-destination.png").resize((int(515.0-25.0), int(84.0-55.0))))
        input_destination_img_id = self.canvas.create_image(25.0, 55.0, anchor="nw", image=self.input_destination_img_tk)
        self.footer_img_tk = ImageTk.PhotoImage(Image.open("build/images/footer.png").resize((540, 46)))
        # SecondPage와 동일하게 즐겨찾기 텍스트 및 아이콘 준비
        self.canvas.create_text(15.0, 98.0, anchor="nw", text="즐겨찾기", fill="#FFFFFF", font=("Malgun Gothic", 14 * -1))
        self.fav_icon_img_tk = ImageTk.PhotoImage(Image.open("build/images/subway-icon.png").resize((14, 15)))
        self.fav_items = []
        # x-icon 추가 (오른쪽 상단)
        x_icon_img = Image.open("build/images/x-icon.png").resize((10, 10))
        self.x_icon_img_tk = ImageTk.PhotoImage(x_icon_img)
        x_icon_id = self.canvas.create_image(520, 10, anchor="nw", image=self.x_icon_img_tk)
        def go_to_second_page(event=None):
            controller.is_selecting_arrival = False
            controller.is_selecting_departure = False
            controller.show_frame("SecondPage")
        self.canvas.tag_bind(x_icon_id, '<Button-1>', go_to_second_page)
        # 텍스트 아이디 생성
        self.departure_text_id = self.canvas.create_text(33.0, 29.0, anchor="nw", text="출발지 입력", fill="#FFFFFF", font=("Malgun Gothic", 14 * -1))
        self.arrival_text_id = self.canvas.create_text(33.0, 61.0, anchor="nw", text="도착지 입력", fill="#FFFFFF", font=("Malgun Gothic", 14 * -1))
        # 출발지 입력 이미지와 텍스트 모두 클릭 시 MainPage로 이동(출발지 선택 모드)
        def go_to_main_departure(event=None):
            if controller.departure_station and controller.arrival_station:
                controller.arrival_station = None
                self.update_arrival_text()
                controller.frames["SecondPage"].update_arrival_text()
            controller.is_selecting_departure = True
            controller.is_selecting_arrival = False
            controller.show_frame("MainPage")
        def go_to_main_arrival(event=None):
            if controller.departure_station and controller.arrival_station:
                controller.departure_station = None
                self.update_departure_text()
                controller.frames["SecondPage"].update_departure_text()
            controller.is_selecting_arrival = True
            controller.is_selecting_departure = False
            controller.show_frame("MainPage")
        self.canvas.tag_bind(input_origin_img_id, '<Button-1>', go_to_main_departure)
        self.canvas.tag_bind(self.departure_text_id, '<Button-1>', go_to_main_departure)
        self.canvas.tag_bind(input_destination_img_id, '<Button-1>', go_to_main_arrival)
        self.canvas.tag_bind(self.arrival_text_id, '<Button-1>', go_to_main_arrival)
        self.render_favorites()
        self.canvas.bind('<Button-1>', self.on_fav_click)
        # 경로 정보 카드 배경
        self.route_card_bg = self.canvas.create_rectangle(20, 190, 520, 270, fill="#FFFFFF", outline="", width=2)
        # 1. 큰 사각형(경로 상세 카드) 그리기
        self.canvas.create_rectangle(20, 290, 520, 800, fill="#FFFFFF", outline="")  # outline 없음

        # 2. 해당 영역에 스크롤 가능한 Frame+Canvas 추가
        self.detail_scroll_canvas = tk.Canvas(self, width=500, height=510, bg="#FFFFFF", bd=0, highlightthickness=0)
        self.detail_scroll_canvas.place(x=20, y=290)

        self.detail_scrollbar = tk.Scrollbar(self, orient="vertical", command=self.detail_scroll_canvas.yview)
        self.detail_scrollbar.place(x=520, y=290, height=510)

        self.detail_inner = tk.Frame(self.detail_scroll_canvas, bg="#FFFFFF")
        self.detail_inner.bind(
            "<Configure>",
            lambda e: self.detail_scroll_canvas.configure(
                scrollregion=self.detail_scroll_canvas.bbox("all")
            )
        )
        self.detail_scroll_canvas.create_window((0, 0), window=self.detail_inner, anchor="nw")
        self.detail_scroll_canvas.configure(yscrollcommand=self.detail_scrollbar.set)

        # 마우스 휠 스크롤 이벤트 바인딩 (Windows/Mac/Linux 모두 지원)
        def _on_mousewheel(event):
            if event.num == 5 or event.delta == -120:
                self.detail_scroll_canvas.yview_scroll(1, "units")
            elif event.num == 4 or event.delta == 120:
                self.detail_scroll_canvas.yview_scroll(-1, "units")
        self.detail_scroll_canvas.bind_all("<MouseWheel>", _on_mousewheel)  # Windows, Mac
        self.detail_scroll_canvas.bind_all("<Button-4>", _on_mousewheel)    # Linux
        self.detail_scroll_canvas.bind_all("<Button-5>", _on_mousewheel)    # Linux

        # 터치(드래그) 스크롤 기능 추가
        # (터치/드래그 스크롤 기능 완전 삭제)
        # self._scroll_start_y = None
        # self._scroll_start_canvas_y = None
        # def _on_scroll_start(event):
        #     self._scroll_start_y = event.y
        #     self._scroll_start_canvas_y = self.detail_scroll_canvas.yview()[0]
        # def _on_scroll_move(event):
        #     if self._scroll_start_y is not None and self._scroll_start_canvas_y is not None:
        #         scrollregion = self.detail_scroll_canvas.bbox("all")
        #         if scrollregion:
        #             total_height = scrollregion[3] - scrollregion[1]
        #             visible_height = self.detail_scroll_canvas.winfo_height()
        #             if total_height > visible_height:
        #                 delta = event.y - self._scroll_start_y
        #                 move_frac = -delta / total_height
        #                 new_y = self._scroll_start_canvas_y + move_frac
        #                 new_y = max(0.0, min(new_y, 1.0))
        #                 self.detail_scroll_canvas.yview_moveto(new_y)
        # self.detail_scroll_canvas.bind("<ButtonPress-1>", _on_scroll_start)
        # self.detail_scroll_canvas.bind("<B1-Motion>", _on_scroll_move)

        # 3. 경로 상세 정보(승차/경유/하차 등)는 반드시 self.detail_inner 위에 그려야 스크롤이 적용됨
        # 예시:
        # label = tk.Label(self.detail_inner, text="경유역1", ...)
        # label.pack()
        self.render_favorites()
        self.canvas.bind('<Button-1>', self.on_fav_click)
        # 하단 로고
        self.canvas.create_image(0, 914, anchor="nw", image=self.footer_img_tk)
        # 마지막에 텍스트 최신화
        self.update_departure_text()
        self.update_arrival_text()
        
        # 경로 계산 및 표시 초기화
        self.route_items = []  # 경로 관련 UI 아이템들을 저장할 리스트
        self.calculate_and_display_route()
        self.selected_departure_time = None  # 사용자가 선택한 출발 시각
        self.route_time_text_id = None  # 출발 시간 텍스트 id 저장
        # 노선별 색상 매핑
        self.line_colors = {
            '1호선': '#E60012',  # 빨간색
            '2호선': '#009944',  # 초록색
            '3호선': '#FFD400',  # 노란색
            '대경선': '#0067B3',  # 파란색
        }

    def calculate_and_display_route(self):
        """실제 경로를 계산하고 UI에 표시"""
        if not self.controller.departure_station or not self.controller.arrival_station:
            return
        try:
            # 출발 시각 적용
            if self.selected_departure_time:
                departure_time = self.selected_departure_time
            else:
                now = datetime.now()
                departure_time = now.replace(minute=0, second=0, microsecond=0) + timedelta(hours=1)
            
            # 실제 가장 빠른 열차 시간 찾기
            actual_departure_time = self.find_earliest_train_time(departure_time)
            
            # 1. 경로 계산 (시간 기반)
            total_cost, path = find_best_route(
                self.controller.departure_station,
                self.controller.arrival_station,
                mode='time',
                start_time=actual_departure_time.strftime('%H:%M:%S')
            )
            
            # 2. 경로를 노선별로 분할
            segments = split_path_by_line(path)
            
            # 3. 방향 정보 추론
            direction_info = infer_direction(path)
            
            # 4. UI 업데이트 (실제 열차 시간 사용)
            self.update_route_display(path, total_cost, segments, direction_info, actual_departure_time)
            
        except Exception as e:
            print(f"경로 계산 오류: {e}")
            # 오류 발생 시 기본 더미 데이터 표시
            self.display_dummy_route()

    def find_earliest_train_time(self, requested_time):
        """요청된 시간 이후 가장 빠른 열차의 실제 출발 시간을 찾기"""
        try:
            from route_finder import find_best_route
            from path_utils import infer_direction
            from data_loader import load_line_station_map, prepare_timetable_long_format_dict
            from timetable_query import get_available_departures
            
            # 먼저 경로 계산 (시간은 임시로 사용)
            total_cost, path = find_best_route(
                self.controller.departure_station,
                self.controller.arrival_station,
                mode='time'
            )
            
            # 방향 정보 추론
            direction_info = infer_direction(path)
            
            # 출발역이 포함된 노선과 방향 찾기
            target_line = None
            direction = None
            for line, dir in direction_info.items():
                if self.controller.departure_station in load_line_station_map()[line]:
                    target_line = line
                    direction = dir
                    break
            
            if target_line and direction:
                # 시각표에서 가장 빠른 열차 찾기
                timetable_dict = prepare_timetable_long_format_dict()
                after_time = requested_time.time()
                
                nearest = get_available_departures(
                    timetable_dict,
                    target_line,
                    direction,
                    self.controller.departure_station,
                    after_time
                )
                
                if not nearest.empty:
                    # 가장 빠른 열차의 출발 시간 반환
                    earliest_train = nearest.iloc[0]
                    return earliest_train['시각'].replace(year=datetime.now().year, month=datetime.now().month, day=datetime.now().day)
            
            # 열차를 찾지 못한 경우 요청된 시간 그대로 반환
            return requested_time
            
        except Exception as e:
            print(f"가장 빠른 열차 시간 찾기 실패: {e}")
            return requested_time

    def update_route_display(self, path, total_cost, segments, direction_info, departure_time):
        """실제 경로 정보로 UI 업데이트"""
        # 기존 경로 관련 UI 아이템들 삭제
        self.clear_route_display()
        
        # 출발 시간 텍스트
        time_str = departure_time.strftime("오늘 %p %I:%M 출발").replace("AM", "오전").replace("PM", "오후")
        self.route_time_text_id = self.canvas.create_text(40, 205, anchor="nw", text=time_str, fill="#6A66FF", font=("Malgun Gothic", 12 * -1), tags="route_time_text")
        self.route_items.append(self.route_time_text_id)
        self.canvas.tag_bind(self.route_time_text_id, '<Button-1>', self.on_time_text_click)
        
        # 소요 시간 (분 단위)
        minutes = int(total_cost / 60)
        time_y = 245
        # 소요 시간 텍스트 먼저 그림
        time_id = self.canvas.create_text(40, time_y, anchor="w", text=f"{minutes}분", fill="#222222", font=("Malgun Gothic", 20, "bold"))
        self.route_items.append(time_id)
        # 소요 시간 텍스트의 width 구하기
        bbox = self.canvas.bbox(time_id)
        if bbox:
            time_text_right = bbox[2]  # 오른쪽 x좌표
        else:
            time_text_right = 40 + 60  # fallback
        
        # 시간대 텍스트는 소요 시간 텍스트 바로 오른쪽에 10px 띄워서 배치
        arrival_time = departure_time + timedelta(seconds=total_cost)
        time_range = f"{departure_time.strftime('%p %I:%M')} ~ {arrival_time.strftime('%p %I:%M')}"
        time_range = time_range.replace("AM", "오전").replace("PM", "오후")
        range_id = self.canvas.create_text(time_text_right + 10, time_y+2, anchor="w", text=time_range, fill="#888888", font=("Malgun Gothic", 12 * -1))
        self.route_items.append(range_id)

        # segments에 duration(초) 정보 추가: 전체 total_cost를 역 개수 비율로 분배
        total_stations = sum(len(seg['stations'])-1 for seg in segments if len(seg['stations']) > 1)
        remain = total_cost
        for i, seg in enumerate(segments):
            n = len(seg['stations'])-1 if len(seg['stations']) > 1 else 0
            if total_stations > 0 and n > 0:
                # 마지막 segment는 남은 시간 모두 할당(오차 방지)
                if i == len(segments)-1:
                    seg['duration'] = remain
                else:
                    seg['duration'] = int(total_cost * n / total_stations)
                    remain -= seg['duration']
            else:
                seg['duration'] = 0

        # 경로 상세 정보 업데이트 및 summary 텍스트 저장
        summary_text = self.display_route_details(path, segments, direction_info, departure_time)
        # summary_text가 없으면 0분, 0개 역 이동 기본값 출력
        if not summary_text:
            summary_text = "0분, 0개 역 이동"
        # (self.canvas 하단 summary_id 출력 완전 삭제)
        # summary_id = self.canvas.create_text(40, 810, anchor="nw", text=summary_text, fill="#6A66FF", font=("Malgun Gothic", 13 * -1))
        # self.route_items.append(summary_id)

    def display_route_details(self, path, segments, direction_info, departure_time):
        """경로 상세 정보 표시 (스크롤 영역 내부에만 그리기)"""
        from data_loader import load_line_station_map, clean_station_name
        line_station_map = load_line_station_map()
        # 기존 상세 정보(원, 텍스트 등) 모두 삭제
        for widget in getattr(self, 'detail_inner_widgets', []):
            widget.destroy()
        self.detail_inner_widgets = []
        # 경로 길이에 따라 캔버스 높이 계산
        n_stations = max(len(path), 3)
        canvas_height = 80 + 40 + 32 * (n_stations-2) + 80  # 출발+경유+도착+여유
        # detail_inner 위에 새로운 캔버스 생성
        self.detail_draw_canvas = tk.Canvas(self.detail_inner, width=480, height=canvas_height, bg="#FFFFFF", highlightthickness=0)
        self.detail_draw_canvas.pack()
        self.detail_inner_widgets.append(self.detail_draw_canvas)
        # 역별 노선 추정 함수 (정제된 이름으로 비교)
        def get_station_lines_and_direction(station):
            clean_name = clean_station_name(station)
            lines = []
            direction = None
            for seg in segments:
                if clean_name in [clean_station_name(s) for s in seg['stations']]:
                    if seg['line'] not in lines:
                        lines.append(seg['line'])
                    direction = seg['direction']
            for line, stations in line_station_map.items():
                if clean_name in [clean_station_name(s) for s in stations]:
                    if line not in lines:
                        lines.append(line)
            return lines, direction
        # 원 여러 개 그리기 함수 (출발/도착역은 크고, 중앙에 호선 번호 표시)
        def draw_multi_circles(x, y, r, lines, show_number=False):
            n = len(lines)
            # 경유역(점)일 때는 offset을 4로 줄여서 겹치게, 출발/도착역(큰 원)은 기존대로
            offset = 7 if r <= 6 else 20
            ids = []
            text_ids = []
            for idx, line in enumerate(lines):
                color = self.line_colors.get(line, '#BBBBBB')
                cx = x + (idx - (n-1)/2)*offset
                id_ = self.detail_draw_canvas.create_oval(cx-r, y-r, cx+r, y+r, fill=color, outline="")
                ids.append(id_)
                if show_number:
                    if line == '대경선':
                        num = 'D'
                    else:
                        num = ''.join(filter(str.isdigit, line))
                    text_id = self.detail_draw_canvas.create_text(cx, y, text=num, fill="#FFFFFF", font=("Malgun Gothic", int(r*1.2), "bold"))
                    text_ids.append(text_id)
            return ids + text_ids
        # 경로가 없거나 역이 2개 미만이면 summary만 반환
        if not path or len(path) < 2:
            return "0분, 0개 역 이동"
        # 출발역 정보
        start_station = path[0]
        start_lines, start_dir = get_station_lines_and_direction(start_station)
        start_y = 40
        start_r = 15
        gap_first = 12  # 출발~첫 경유 간격
        gap_between = 28  # 경유역 간격
        dot_r = 6
        end_r = 15

        # 출발역 원(여러 호선, 크고 숫자 표시)
        start_circles = draw_multi_circles(35, start_y, start_r, start_lines, show_number=True)
        direction_text = f" ({start_dir}행)" if start_dir else ""
        start_text = f"{start_station}역 승차{direction_text}"
        start_text_id = self.detail_draw_canvas.create_text(65, start_y-10, anchor="nw", text=start_text, fill="#222222", font=("Malgun Gothic", 13 * -1))

        # 첫 경유역 y좌표: 출발역 원 아래 테두리 + gap_first
        y = start_y + start_r + gap_first
        prev_x, prev_y, prev_r, prev_lines = 35, start_y, start_r, start_lines
        for i, station in enumerate(path[1:-1], 1):
            x, y = 35, y
            lines, _ = get_station_lines_and_direction(station)
            # 선: 이전 원의 아래 테두리 → 현재 점의 위 테두리
            common_lines = set(prev_lines) & set(lines)
            if common_lines:
                line = list(common_lines)[0]
                color = self.line_colors.get(line, "#BBBBBB")
                self.detail_draw_canvas.create_line(prev_x, prev_y + prev_r, x, y - dot_r, fill=color, width=5)
            # 점(경유역)
            dots = draw_multi_circles(x, y, dot_r, lines, show_number=False)
            station_text = f"{station}역"
            station_id = self.detail_draw_canvas.create_text(65, y-5, anchor="nw", text=station_text, fill="#666666", font=("Malgun Gothic", 12 * -1))
            prev_x, prev_y, prev_r, prev_lines = x, y, dot_r, lines
            y += gap_between

        # 도착역
        end_center_y = y + end_r
        end_lines, _ = get_station_lines_and_direction(path[-1])
        # 마지막 경유~도착역 선: 마지막 점의 아래 테두리 → 도착역 원의 위 테두리
        if len(path) > 1:
            common_lines = set(prev_lines) & set(end_lines)
            if common_lines:
                line = list(common_lines)[0]
                color = self.line_colors.get(line, "#BBBBBB")
                self.detail_draw_canvas.create_line(prev_x, prev_y + prev_r, 35, end_center_y - end_r, fill=color, width=5)
        # 도착역 원
        end_circles = draw_multi_circles(35, end_center_y, end_r, end_lines, show_number=True)
        # 도착역 텍스트를 원의 중심과 수직 중앙 정렬
        end_text_id = self.detail_draw_canvas.create_text(65, end_center_y, anchor="w", text=f"{path[-1]}역 하차", fill="#222222", font=("Malgun Gothic", 13, "bold"))
        # summary_text(0분, 0개 역 이동 등) 정상 복구
        minutes = int(sum(segment.get('duration', 0) for segment in segments) / 60)
        station_count = len(path)
        summary_text = f"{minutes}분, {station_count}개 역 이동"
        # 기존 색상(#6A66FF)과 폰트 스타일로 detail_draw_canvas에 출력
        summary_id = self.detail_draw_canvas.create_text(65, end_center_y + end_r + 5, anchor="nw", text=summary_text, fill="#6A66FF", font=("Malgun Gothic", 13 * -1))
        self.route_items.extend([end_text_id, summary_id])

    def clear_route_display(self):
        """기존 경로 관련 UI 아이템들 삭제"""
        for item in self.route_items:
            self.canvas.delete(item)
        self.route_items = []

    def display_route_summary(self, total_cost, departure_time, path):
        """경로 요약 정보 표시"""
        # 출발 시간 텍스트
        time_str = departure_time.strftime("오늘 %p %I:%M 출발").replace("AM", "오전").replace("PM", "오후")
        time_id = self.canvas.create_text(40, 205, anchor="nw", text=time_str, 
                                        fill="#6A66FF", font=("Malgun Gothic", 12 * -1))
        self.route_items.append(time_id)
        
        # 소요 시간 (분 단위)
        minutes = int(total_cost / 60)
        # 카드 영역: y=190~270, 높이=80
        # 중앙 y좌표: 190 + 40 = 230
        time_id = self.canvas.create_text(80, 230, anchor="w", text=f"{minutes}분", 
                                        fill="#222222", font=("Malgun Gothic", 20, "bold"))
        self.route_items.append(time_id)
        
        # 도착 시간 계산 및 표시
        arrival_time = departure_time + timedelta(seconds=total_cost)
        time_range = f"{departure_time.strftime('%p %I:%M')} ~ {arrival_time.strftime('%p %I:%M')}"
        time_range = time_range.replace("AM", "오전").replace("PM", "오후")
        # 시간대 텍스트도 카드 중앙에 맞춰 y=230에 배치, x=200(왼쪽 여백)
        range_id = self.canvas.create_text(200, 230, anchor="w", text=time_range, 
                                         fill="#888888", font=("Malgun Gothic", 12 * -1))
        self.route_items.append(range_id)

    def display_dummy_route(self):
        """더미 경로 정보 표시 (오류 발생 시)"""
        # 기존 더미 데이터와 동일한 내용
        # 경로 정보 카드
        time_id = self.canvas.create_text(40, 205, anchor="nw", text="오늘 오전 11:00 출발", 
                                        fill="#6A66FF", font=("Malgun Gothic", 12 * -1))
        self.route_items.append(time_id)
        
        time_id = self.canvas.create_text(40, 235, anchor="nw", text="20분", 
                                        fill="#222222", font=("Malgun Gothic", 20, "bold"))
        self.route_items.append(time_id)
        
        range_id = self.canvas.create_text(120, 240, anchor="nw", text="오전 11:07 ~ 11:27", 
                                         fill="#888888", font=("Malgun Gothic", 12 * -1))
        self.route_items.append(range_id)
        
        # 경로 상세 카드
        start_circle = self.canvas.create_oval(40, 320, 70, 350, fill="#6A66FF", outline="")
        self.route_items.append(start_circle)
        
        start_text_id = self.canvas.create_text(80, 325, anchor="nw", text="화원역 승차 (대곡역 방면, 빠른하차 6-2)", 
                                              fill="#222222", font=("Malgun Gothic", 13 * -1))
        self.route_items.append(start_text_id)
        
        # 경유역 리스트(더미)
        stations = ["대곡역", "진천역", "월배역", "상인역", "월촌역", "송현역", "서부정류장역", "대명역", "안지랑역", "현충로역", "영대병원역"]
        y = 360
        for st in stations:
            dot = self.canvas.create_oval(52, y, 58, y+6, fill="#BBBBBB", outline="")
            self.route_items.append(dot)
            
            station_id = self.canvas.create_text(80, y-5, anchor="nw", text=st, 
                                               fill="#666666", font=("Malgun Gothic", 12 * -1))
            self.route_items.append(station_id)
            y += 32
        
        # 도착역 강조
        end_circle = self.canvas.create_oval(40, y, 70, y+30, fill="#FF4B4B", outline="")
        self.route_items.append(end_circle)
        
        end_text_id = self.canvas.create_text(80, y+5, anchor="nw", text="교대역 하차", 
                                            fill="#FF4B4B", font=("Malgun Gothic", 13, "bold"))
        self.route_items.append(end_text_id)
        
        # 이동 정보
        summary_id = self.canvas.create_text(40, 790, anchor="nw", text="20분, 12개 역 이동", 
                                           fill="#6A66FF", font=("Malgun Gothic", 13 * -1))
        self.route_items.append(summary_id)

    def update_departure_text(self):
        dep = self.controller.departure_station or "화원"
        self.canvas.itemconfig(self.departure_text_id, text=f"출발지: {dep}")
        # 출발역이 변경되면 경로 재계산
        if self.controller.departure_station and self.controller.arrival_station:
            self.calculate_and_display_route()
            
    def update_arrival_text(self):
        arr = self.controller.arrival_station or "교대"
        self.canvas.itemconfig(self.arrival_text_id, text=f"도착지: {arr}")
        # 도착역이 변경되면 경로 재계산
        if self.controller.departure_station and self.controller.arrival_station:
            self.calculate_and_display_route()
    def render_favorites(self):
        # 기존 즐겨찾기 아이템 삭제
        for item in getattr(self, 'fav_items', []):
            self.canvas.delete(item)
        self.fav_items = []
        x = 110  # '즐겨찾기' 텍스트 오른쪽
        y = 98
        self._fav_hitboxes = []  # (x1, y1, x2, y2, fav) 리스트
        for fav in self.controller.favorites if hasattr(self.controller, 'favorites') and self.controller.favorites else []:
            text_w = len(fav) * 14
            icon_id = self.canvas.create_image(x, y+2, anchor="nw", image=self.fav_icon_img_tk)
            text_id = self.canvas.create_text(x+20, y, anchor="nw", text=fav, fill="#FFFFFF", font=("Malgun Gothic", 14 * -1))
            self.fav_items.extend([icon_id, text_id])
            self._fav_hitboxes.append((x, y, x+20+text_w, y+22, fav))
            x += 20 + text_w + 30  # 아이콘+텍스트+여백(더 넓게)

    def on_fav_click(self, event):
        # 즐겨찾기 hitbox 내 클릭 시 팝업
        if not hasattr(self, '_fav_hitboxes'):
            return
        for x1, y1, x2, y2, fav in self._fav_hitboxes:
            if x1 <= event.x <= x2 and y1 <= event.y <= y2:
                self.show_fav_popup(x1+20, y1+24, fav)
                return

    def show_fav_popup(self, x, y, station_name, event=None):
        # 팝업이 화면 밖으로 나가지 않도록 x좌표 보정 및 y좌표 위로 10만큼 띄움
        popup_bg_width = 220
        popup_bg_height = 88
        btn_width, btn_height = 200, 30
        gap = 8
        btn_count = 2
        btn_total_height = btn_count * btn_height + (btn_count - 1) * gap
        x_offset = (popup_bg_width - btn_width) // 2
        y1 = (popup_bg_height - btn_total_height) // 2
        y2 = y1 + btn_height + gap

        # y좌표 위로 10만큼 이동, 최소 0 보장
        y = max(0, y + 10)

        # 배경 이미지
        popup_bg_img = Image.open("build/images/popup-bg.png").resize((popup_bg_width, popup_bg_height))
        self.fav_popup_bg_img_tk = ImageTk.PhotoImage(popup_bg_img)
        popup_canvas = tk.Canvas(self.canvas, width=popup_bg_width, height=popup_bg_height, highlightthickness=0, bd=0, bg='white')
        popup_canvas.create_image(popup_bg_width//2, popup_bg_height//2, image=self.fav_popup_bg_img_tk)

        # 버튼 이미지
        btn_img = ImageTk.PhotoImage(Image.open("build/images/popup-btn.png").resize((btn_width, btn_height)))
        self.fav_btn_img_tk = btn_img
        # 버튼1
        btn1_img = popup_canvas.create_image(x_offset + btn_width//2, y1 + btn_height//2, image=self.fav_btn_img_tk)
        btn1_text = popup_canvas.create_text(x_offset + btn_width//2, y1 + btn_height//2, text=f"{station_name}(역)을 출발지로 설정", fill="white", font=("Malgun Gothic", 9))
        # 버튼2
        btn2_img = popup_canvas.create_image(x_offset + btn_width//2, y2 + btn_height//2, image=self.fav_btn_img_tk)
        btn2_text = popup_canvas.create_text(x_offset + btn_width//2, y2 + btn_height//2, text=f"{station_name}(역)을 도착지로 설정", fill="white", font=("Malgun Gothic", 9))

        # 클릭 이벤트 연결
        def btn1_cmd(event=None): self.set_departure_from_fav(station_name)
        def btn2_cmd(event=None): self.set_arrival_from_fav(station_name)
        for tag in [btn1_img, btn1_text]:
            popup_canvas.tag_bind(tag, '<Button-1>', btn1_cmd)
        for tag in [btn2_img, btn2_text]:
            popup_canvas.tag_bind(tag, '<Button-1>', btn2_cmd)

        # 기존 팝업 닫기
        if hasattr(self, 'fav_popup_window') and self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
            self.fav_popup_canvas.delete(self.fav_popup_window)
            self.fav_popup_window = None
        self.fav_popup_canvas = self.canvas
        self.fav_popup_window = self.canvas.create_window(x, y, window=popup_canvas, anchor="nw", width=popup_bg_width, height=popup_bg_height)

        def close_popup(event=None):
            if self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
                self.fav_popup_canvas.delete(self.fav_popup_window)
                self.fav_popup_window = None
            if hasattr(self, 'fav_popup_bind_id') and self.fav_popup_bind_id:
                self.canvas.unbind("<Button-1>", self.fav_popup_bind_id)
                self.fav_popup_bind_id = None
            # 즐겨찾기 클릭 바인딩 복구
            self.canvas.bind('<Button-1>', self.on_fav_click)
        self.fav_popup_bind_id = self.canvas.bind("<Button-1>", close_popup, add='+')

    def set_departure_from_fav(self, station_name):
        # 출발지/도착지 모두 지정되어 있으면 도착지 초기화
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.set_arrival_station(None)
        # 도착지와 동일한 역이면 경고
        if self.controller.arrival_station == station_name:
            messagebox.showinfo("알림", "출발지와 도착지가 동일합니다!")
            return
        self.controller.set_departure_station(station_name)
        self.controller.is_selecting_departure = False
        self.controller.is_selecting_arrival = False
        # 팝업 닫기
        if hasattr(self, 'fav_popup_window') and self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
            self.fav_popup_canvas.delete(self.fav_popup_window)
            self.fav_popup_window = None
        # 페이지 전환 분기
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.show_frame("ThirdPage")
        else:
            self.controller.show_frame("SecondPage")
    def set_arrival_from_fav(self, station_name):
        # 출발지/도착지 모두 지정되어 있으면 출발지 초기화
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.set_departure_station(None)
        # 출발지와 동일한 역이면 경고
        if self.controller.departure_station == station_name:
            messagebox.showinfo("알림", "출발지와 도착지가 동일합니다!")
            return
        self.controller.set_arrival_station(station_name)
        self.controller.is_selecting_arrival = False
        self.controller.is_selecting_departure = False
        # 출발지와 도착지가 모두 지정된 경우 ThirdPage로 이동
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.show_frame("ThirdPage")
        else:
            self.controller.show_frame("SecondPage")

    def close_fav_popup(self):
        if hasattr(self, 'fav_popup_window') and self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
            self.fav_popup_canvas.delete(self.fav_popup_window)
            self.fav_popup_window = None

    def on_time_text_click(self, event=None):
        # 시간 선택 다이얼로그 표시
        now = datetime.now()
        default_hour = now.hour + 1 if now.hour < 23 else now.hour
        default_minute = 0
        hour = simpledialog.askinteger("출발 시각 선택", "출발 '시'를 입력하세요 (0~23)", initialvalue=default_hour, minvalue=0, maxvalue=23, parent=self)
        if hour is None:
            return
        minute = simpledialog.askinteger("출발 시각 선택", "출발 '분'을 입력하세요 (0~59)", initialvalue=default_minute, minvalue=0, maxvalue=59, parent=self)
        if minute is None:
            return
        # 선택된 시간으로 출발 시각 저장 및 경로 재계산
        selected = datetime.now().replace(hour=hour, minute=minute, second=0, microsecond=0)
        self.selected_departure_time = selected
        self.calculate_and_display_route()

class FourthPage(tk.Frame):
    def __init__(self, parent, controller):
        super().__init__(parent)
        self.controller = controller
        self.recent_searches = []  # 최근검색 리스트
        self.canvas = tk.Canvas(
            self,
            bg="#FFFFFF",
            height=960,
            width=540,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )
        self.canvas.place(x=0, y=0)
        # search-icon 이미지 준비 (이 줄을 추가!)
        self.search_icon_img_tk = ImageTk.PhotoImage(Image.open("build/images/search-icon.png").resize((18, 18)))
        # MainPage와 동일한 전철역 검색창 (이미지 draw.text는 제거)
        input_search_img = Image.open("build/images/input-search2.png").resize((496, 48))
        self.tk_img = ImageTk.PhotoImage(input_search_img)
        input_search_img_id = self.canvas.create_image(22, 13, anchor="nw", image=self.tk_img)
        # Entry(검색창) 추가
        self.search_entry = tk.Entry(self.canvas, font=("Malgun Gothic", 14), bd=0, relief="flat", fg="#222222")
        self.search_entry.place(x=60, y=22, width=350, height=32)
        # placeholder 관련 코드 제거 (insert, config, focus 이벤트 등)
        # self.search_entry.insert(0, "전철역 검색")
        # self.search_entry.config(fg="#bbbbbb")
        # def on_entry_focus_in(event):
        #     if self.search_entry.get() == "전철역 검색":
        #         self.search_entry.delete(0, tk.END)
        #         self.search_entry.config(fg="#222222")
        # def on_entry_focus_out(event):
        #     if not self.search_entry.get():
        #         self.search_entry.insert(0, "전철역 검색")
        #         self.search_entry.config(fg="#bbbbbb")
        # self.search_entry.bind("<FocusIn>", on_entry_focus_in)
        # self.search_entry.bind("<FocusOut>", on_entry_focus_out)
        self.search_entry.bind("<Return>", self.on_search_enter)
        self.search_entry.bind("<KeyRelease>", self.on_search_typing)
        # 후보 안내/리스트용
        self.suggestion_items = []
        # arrow(뒤로가기) 버튼 이미지를 검색창 이미지보다 나중에 그려서 항상 위에 보이게
        self.arrow_img_tk = ImageTk.PhotoImage(Image.open("build/images/arrow-icon.png").resize((10, 20)))
        arrow_img_id = self.canvas.create_image(37, 27, anchor="nw", image=self.arrow_img_tk)
        def go_to_main(event=None):
            controller.show_frame("MainPage")
        self.canvas.tag_bind(arrow_img_id, '<Button-1>', go_to_main)
        # 즐겨찾기 아래 회색 배경 박스
        self.canvas.create_rectangle(1.0, 151.70, 540.0, 215.08, fill="#EEEEEE", outline="")
        # footer2.png 이미지 표시 (회색 박스 위에 정확히 올림)
        self.footer2_png = Image.open("build/images/footer2.png").resize((540, 64))
        self.footer2_png_tk = ImageTk.PhotoImage(self.footer2_png)
        self.canvas.create_image(0, 151.7, anchor="nw", image=self.footer2_png_tk)
        # 텍스트들
        self.canvas.create_text(23.37, 82.20, anchor="nw", text="즐겨찾기", fill="#000000", font=("Malgun Gothic", 15 * -1))
        self.canvas.create_text(23.37, 225.41, anchor="nw", text="최근검색", fill="#000000", font=("Malgun Gothic", 15 * -1))
        # 즐겨찾기 렌더링
        self.fav_icon_img2_tk = ImageTk.PhotoImage(Image.open("build/images/subway-icon2.png").resize((14, 15)))
        self.fav_items = []
        self.render_favorites()
        self.render_recent_searches()
        self.canvas.bind('<Button-1>', self.on_fav_click)
        # 최근검색 리스트는 별도 구현(아래 메서드 참고)

    def on_search_typing(self, event):
        query = self.search_entry.get().strip()
        # 2글자 미만이면 안내문구를 삭제하지 않고 그대로 둔다
        if len(query) < 2:
            return
        # 2글자 이상이 되면 기존 안내/후보 문구 삭제
        if hasattr(self, 'suggestion_items'):
            for item in self.suggestion_items:
                self.canvas.delete(item)
        self.suggestion_items = []
        stations = self.controller.frames["MainPage"].stations
        candidates = [st["name"] for st in stations if query in st["name"]]
        y = 60  # 팝업 시작 y좌표
        popup_x1 = 50
        popup_x2 = 480
        # 안내/후보 리스트가 있을 때만 팝업 배경 생성
        if not candidates:
            msg = "정확한 전철역을 검색해주세요."
            # 팝업 배경
            bg_id = self.canvas.create_rectangle(popup_x1, y, popup_x2, y+40, fill="#FFFFFF", outline="#CCCCCC", width=1)
            self.suggestion_items.append(bg_id)
            # 안내문구
            msg_id = self.canvas.create_text(popup_x1+15, y+20, anchor="w", text=msg, fill="#FF3333", font=("Malgun Gothic", 13, "bold"))
            self.suggestion_items.append(msg_id)
            return
        # 팝업 배경 (안내+후보 개수만큼 높이)
        popup_h = 40 + 28 * len(candidates) + 4  # 마지막 요소 아래 4px 여유
        bg_id = self.canvas.create_rectangle(popup_x1, y, popup_x2, y+popup_h, fill="#FFFFFF", outline="#CCCCCC", width=1)
        self.suggestion_items.append(bg_id)
        # 안내문구
        if len(candidates) == 1:
            msg = f"찾으시는 전철역이 '{candidates[0]}'가 맞나요?"
        else:
            msg = "찾으시는 전철역이 아래 중에 있나요?"
        msg_id = self.canvas.create_text(popup_x1+15, y+20, anchor="w", text=msg, fill="#6A66FF", font=("Malgun Gothic", 13, "bold"))
        self.suggestion_items.append(msg_id)
        y += 40
        # 후보 리스트
        for cand in candidates:
            cand_id = self.canvas.create_text(popup_x1+15, y+14, anchor="w", text=cand, fill="#222222", font=("Malgun Gothic", 14 * -1), tags="suggestion")
            self.suggestion_items.append(cand_id)
            def on_cand_click(event, name=cand):
                # 최근검색 추가(중복 제거, 최대 5개)
                if name in self.recent_searches:
                    self.recent_searches.remove(name)
                self.recent_searches.insert(0, name)
                if len(self.recent_searches) > 5:
                    self.recent_searches.pop()
                self.render_recent_searches()
                self.reset_search_ui()
                # MainPage로 이동 및 해당 역 하이라이트
                self.controller.show_frame("MainPage")
                self.controller.frames["MainPage"].focus_station_by_name(name)
            self.canvas.tag_bind(cand_id, '<Button-1>', on_cand_click)
            y += 28

    def render_recent_searches(self):
        # 기존 아이템 삭제
        if hasattr(self, 'recent_items'):
            for item in self.recent_items:
                self.canvas.delete(item)
        self.recent_items = []
        # 히스토리 삭제 텍스트도 삭제
        if hasattr(self, 'history_delete_id') and self.history_delete_id:
            self.canvas.delete(self.history_delete_id)
            self.history_delete_id = None
        y = 261  # 최근검색 시작 y좌표
        for name in self.recent_searches:
            icon_id = self.canvas.create_image(25, y, anchor="nw", image=self.search_icon_img_tk)
            text_id = self.canvas.create_text(60, y, anchor="nw", text=name, fill="#606060", font=("Malgun Gothic", 14 * -1))
            self.recent_items.extend([icon_id, text_id])
            def on_recent_click(event, name=name):
                self.reset_search_ui()
                self.controller.show_frame("MainPage")
                self.controller.frames["MainPage"].focus_station_by_name(name)
            self.canvas.tag_bind(icon_id, '<Button-1>', on_recent_click)
            self.canvas.tag_bind(text_id, '<Button-1>', on_recent_click)
            y += 32
        # 최근검색이 있을 때만 히스토리 삭제 텍스트 추가
        if self.recent_searches:
            self.history_delete_id = self.canvas.create_text(229.0, y, anchor="nw", text="히스토리 삭제", fill="#6A66FF", font=("Malgun Gothic", 14 * -1))
            self.canvas.tag_bind(self.history_delete_id, '<Button-1>', self.clear_recent_searches)

    def clear_recent_searches(self, event=None):
        self.recent_searches = []
        self.render_recent_searches()

    def on_search_enter(self, event):
        query = self.search_entry.get().strip()
        if not query or query == "전철역 검색":
            return
        # 후보 안내/리스트 삭제(기존 문구 모두 지움)
        if hasattr(self, 'suggestion_items'):
            for item in self.suggestion_items:
                self.canvas.delete(item)
            self.suggestion_items = []
        # 2글자 미만일 때 안내 문구 표시 (팝업 배경 포함)
        if len(query) < 2:
            popup_x1 = 50
            popup_x2 = 480
            y = 60
            bg_id = self.canvas.create_rectangle(popup_x1, y, popup_x2, y+40, fill="#FFFFFF", outline="#CCCCCC", width=1)
            msg = "2글자 이상 입력해주세요."
            msg_id = self.canvas.create_text(popup_x1+15, y+20, anchor="w", text=msg, fill="#FF3333", font=("Malgun Gothic", 13, "bold"))
            self.suggestion_items = [bg_id, msg_id]
            return
        # 역 이름이 존재하는지 확인
        stations = self.controller.frames["MainPage"].stations
        candidates = [st["name"] for st in stations if query in st["name"]]
        y = 60
        popup_x1 = 50
        popup_x2 = 480
        if not candidates:
            bg_id = self.canvas.create_rectangle(popup_x1, y, popup_x2, y+40, fill="#FFFFFF", outline="#CCCCCC", width=1)
            msg = "정확한 전철역을 검색해주세요."
            msg_id = self.canvas.create_text(popup_x1+15, y+20, anchor="w", text=msg, fill="#FF3333", font=("Malgun Gothic", 13, "bold"))
            self.suggestion_items = [bg_id, msg_id]
            return
        # 안내/후보 리스트 팝업만 띄우고, MainPage 이동은 후보 클릭에서만 처리
        popup_h = 40 + 28 * len(candidates) + 8  # 마지막 요소 아래 4px 여유
        bg_id = self.canvas.create_rectangle(popup_x1, y, popup_x2, y+popup_h, fill="#FFFFFF", outline="#CCCCCC", width=1)
        self.suggestion_items.append(bg_id)
        if len(candidates) == 1:
            msg = f"찾으시는 전철역이 '{candidates[0]}'가 맞나요?"
        else:
            msg = "찾으시는 전철역이 아래 중에 있나요?"
        msg_id = self.canvas.create_text(popup_x1+15, y+20, anchor="w", text=msg, fill="#6A66FF", font=("Malgun Gothic", 13, "bold"))
        self.suggestion_items.append(msg_id)
        y += 40
        for cand in candidates:
            cand_id = self.canvas.create_text(popup_x1+15, y+14, anchor="w", text=cand, fill="#222222", font=("Malgun Gothic", 14 * -1), tags="suggestion")
            self.suggestion_items.append(cand_id)
            def on_cand_click(event, name=cand):
                # 최근검색 추가(중복 제거, 최대 5개)
                if name in self.recent_searches:
                    self.recent_searches.remove(name)
                self.recent_searches.insert(0, name)
                if len(self.recent_searches) > 5:
                    self.recent_searches.pop()
                self.render_recent_searches()
                self.reset_search_ui()
                # MainPage로 이동 및 해당 역 하이라이트
                self.controller.show_frame("MainPage")
                self.controller.frames["MainPage"].focus_station_by_name(name)
            self.canvas.tag_bind(cand_id, '<Button-1>', on_cand_click)
            y += 28

    def render_favorites(self):
        # 기존 즐겨찾기 아이템 삭제
        for item in getattr(self, 'fav_items', []):
            self.canvas.delete(item)
        self.fav_items = []
        x = 24  # '즐겨찾기' 텍스트 오른쪽(왼쪽 여백 줄임)
        y = 116
        self._fav_hitboxes = []  # (x1, y1, x2, y2, fav) 리스트
        for fav in self.controller.favorites:
            text_w = len(fav) * 15
            icon_id = self.canvas.create_image(x, y+2, anchor="nw", image=self.fav_icon_img2_tk)
            text_id = self.canvas.create_text(x+20, y, anchor="nw", text=fav, fill="#6A66FF", font=("Malgun Gothic", 14 * -1))
            self.fav_items.extend([icon_id, text_id])
            self._fav_hitboxes.append((x, y, x+20+text_w, y+22, fav))
            x += 20 + text_w + 30

    def on_fav_click(self, event):
        # 즐겨찾기 hitbox 내 클릭 시 해당 역으로 이동(검색과 동일하게) + 최근검색에 추가
        if not hasattr(self, '_fav_hitboxes'):
            return
        for x1, y1, x2, y2, fav in self._fav_hitboxes:
            if x1 <= event.x <= x2 and y1 <= event.y <= y2:
                # 최근검색 추가(중복 제거, 최대 5개)
                if fav in self.recent_searches:
                    self.recent_searches.remove(fav)
                self.recent_searches.insert(0, fav)
                if len(self.recent_searches) > 5:
                    self.recent_searches.pop()
                self.render_recent_searches()
                # MainPage로 이동 및 해당 역 하이라이트
                self.reset_search_ui()
                self.controller.show_frame("MainPage")
                self.controller.frames["MainPage"].focus_station_by_name(fav)
                return

    def show_fav_popup(self, x, y, station_name, event=None):
        popup_width = 200
        canvas_width = int(self.canvas['width'])
        if x + popup_width > canvas_width:
            x = canvas_width - popup_width
        if hasattr(self, 'fav_popup_window') and self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
            self.fav_popup_canvas.delete(self.fav_popup_window)
            self.fav_popup_window = None
        self.fav_popup_canvas = self.canvas
        frame = tk.Frame(self.canvas, bg="#F8F8F8", bd=1, relief="solid")
        btn1 = tk.Button(frame, text=f"{station_name}(역)을 출발지로 설정", font=("Malgun Gothic", 10), command=lambda: self.set_departure_from_fav(station_name))
        btn2 = tk.Button(frame, text=f"{station_name}(역)을 도착지로 설정", font=("Malgun Gothic", 10), command=lambda: self.set_arrival_from_fav(station_name))
        btn1.pack(fill="x", padx=5, pady=2)
        btn2.pack(fill="x", padx=5, pady=2)
        self.fav_popup_window = self.canvas.create_window(x, y, window=frame, anchor="nw")
        def close_popup(event=None):
            if self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
                self.fav_popup_canvas.delete(self.fav_popup_window)
                self.fav_popup_window = None
            if hasattr(self, 'fav_popup_bind_id') and self.fav_popup_bind_id:
                self.canvas.unbind("<Button-1>", self.fav_popup_bind_id)
                self.fav_popup_bind_id = None
            # 즐겨찾기 클릭 바인딩 복구
            self.canvas.bind('<Button-1>', self.on_fav_click)
        self.fav_popup_bind_id = self.canvas.bind("<Button-1>", close_popup, add='+')

    def set_departure_from_fav(self, station_name):
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.set_arrival_station(None)
        if self.controller.arrival_station == station_name:
            messagebox.showinfo("알림", "출발지와 도착지가 동일합니다!")
            return
        self.controller.set_departure_station(station_name)
        self.controller.is_selecting_departure = False
        self.controller.is_selecting_arrival = False
        if hasattr(self, 'fav_popup_window') and self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
            self.fav_popup_canvas.delete(self.fav_popup_window)
            self.fav_popup_window = None
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.show_frame("ThirdPage")
        else:
            self.controller.show_frame("FourthPage")

    def set_arrival_from_fav(self, station_name):
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.set_departure_station(None)
        if self.controller.departure_station == station_name:
            messagebox.showinfo("알림", "출발지와 도착지가 동일합니다!")
            return
        self.controller.set_arrival_station(station_name)
        self.controller.is_selecting_arrival = False
        self.controller.is_selecting_departure = False
        if hasattr(self, 'fav_popup_window') and self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
            self.fav_popup_canvas.delete(self.fav_popup_window)
            self.fav_popup_window = None
        if self.controller.departure_station and self.controller.arrival_station:
            self.controller.show_frame("ThirdPage")
        else:
            self.controller.show_frame("FourthPage")

    def close_fav_popup(self):
        if hasattr(self, 'fav_popup_window') and self.fav_popup_window and hasattr(self, 'fav_popup_canvas') and self.fav_popup_canvas:
            self.fav_popup_canvas.delete(self.fav_popup_window)
            self.fav_popup_window = None

    def reset_search_ui(self):
        # 검색창 완전히 비우기
        if hasattr(self, 'search_entry'):
            self.search_entry.delete(0, tk.END)
            self.search_entry.config(fg="#222222")  # 기본 폰트 색상(검정)
        # 팝업(후보/안내 리스트) 초기화
        if hasattr(self, 'suggestion_items'):
            for item in self.suggestion_items:
                self.canvas.delete(item)
            self.suggestion_items = []

class MetroApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.title("대구지하철노선도")
        self.geometry("540x960")
        self.departure_station = None
        self.arrival_station = None
        self.is_selecting_departure = False
        self.is_selecting_arrival = False
        self.favorites = []  # 즐겨찾기 역 리스트
        self.frames = {}
        for F in (MainPage, SecondPage, ThirdPage, FourthPage):
            frame = F(self, self)
            self.frames[F.__name__] = frame
            frame.place(x=0, y=0, relwidth=1, relheight=1)
        self.show_frame("MainPage")
    def show_frame(self, name):
        print("show_frame:", name)
        self.frames[name].tkraise()
        # MainPage가 아닐 때 하이라이트 원 삭제
        if name != "MainPage":
            if hasattr(self.frames["MainPage"], "highlight_circle") and self.frames["MainPage"].highlight_circle:
                self.frames["MainPage"].img_canvas.delete(self.frames["MainPage"].highlight_circle)
                self.frames["MainPage"].highlight_circle = None
        if name == "MainPage":
            self.frames["MainPage"].reset_popup_state()
        if name == "SecondPage":
            self.frames["SecondPage"].close_fav_popup()  # SecondPage 진입 시 팝업 닫기
            self.frames["SecondPage"].render_favorites()
        if name == "ThirdPage":
            self.frames["ThirdPage"].close_fav_popup()
            self.frames["ThirdPage"].render_favorites()
            # ThirdPage 진입 시 경로 재계산
            self.frames["ThirdPage"].calculate_and_display_route()
        if name == "FourthPage":
            if hasattr(self.frames["FourthPage"], "close_fav_popup"):
                self.frames["FourthPage"].close_fav_popup()
            self.frames["FourthPage"].render_favorites()
    def set_departure_station(self, station_name):
        self.departure_station = station_name
        self.frames["SecondPage"].update_departure_text()
        self.frames["ThirdPage"].update_departure_text() # ThirdPage에도 출발지 업데이트
    def set_arrival_station(self, station_name):
        self.arrival_station = station_name
        self.frames["SecondPage"].update_arrival_text()
        self.frames["ThirdPage"].update_arrival_text() # ThirdPage에도 도착지 업데이트

if __name__ == "__main__":
    app = MetroApp()
    app.mainloop()