
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

# Pillow import 추가
from PIL import Image, ImageTk, ImageDraw, ImageFont
import tkinter as tk


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\전승원\Documents\GitHub\metro\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
window.title('대구지하철노선도')

window.geometry("540x960")
window.configure(bg = "#FFFFFF")

# 1. 메인 캔버스(배경, 상단/하단 등)
canvas = Canvas(
    window,
    bg="#FFFFFF",
    height=960,
    width=540,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)
canvas.place(x=0, y=0)
# canvas.create_rectangle(22.0, 13.0, 459.0, 61.0, fill="#FFFFFF", outline="")는 input-search.png로 대체
input_search_img = Image.open("images/input-search.png")
input_search_img = input_search_img.resize((int(459.0-22.0), int(61.0-13.0)))

# '전철역 검색' 텍스트 추가 (왼쪽 패딩 20px, 세로 중앙, 색상 #cccccc)
draw = ImageDraw.Draw(input_search_img)
try:
    font = ImageFont.truetype("C:\\Windows\\Fonts\\malgun.ttf", 18)
except:
    font = ImageFont.load_default()
text = "전철역 검색"
text_color = "#bbbbbb"
text_x = 20

# 텍스트 bbox로 정확한 중앙 계산
try:
    bbox = draw.textbbox((0, 0), text, font=font)
    text_height = bbox[3] - bbox[1]
    text_y = (input_search_img.height - text_height) // 2 - bbox[1]
except AttributeError:
    text_width, text_height = draw.textsize(text, font=font)
    text_y = (input_search_img.height - text_height) // 2

draw.text((text_x, text_y), text, font=font, fill=text_color)

input_search_img_tk = ImageTk.PhotoImage(input_search_img)
canvas.create_image(22.0, 13.0, anchor="nw", image=input_search_img_tk)
canvas.input_search_img_tk = input_search_img_tk  # 참조 유지

# canvas.create_rectangle(469.0, 13.0, 517.0, 61.0, fill="#6A66FF", outline="")는 location-search.png로 대체
location_search_img = Image.open("images/location-search.png")
location_search_img = location_search_img.resize((int(517.0-469.0), int(61.0-13.0)))
location_search_img_tk = ImageTk.PhotoImage(location_search_img)
canvas.create_image(469.0, 13.0, anchor="nw", image=location_search_img_tk)
canvas.location_search_img_tk = location_search_img_tk  # 참조 유지

# footer rectangle을 footer.png 이미지로 대체
# canvas.create_rectangle(0.0, 914.0, 540.0, 960.0, fill="#D9D9D9", outline="")
footer_img = Image.open("images/footer.png")
footer_img = footer_img.resize((540, 46))
footer_img_tk = ImageTk.PhotoImage(footer_img)
canvas.create_image(0, 914, anchor="nw", image=footer_img_tk)
canvas.footer_img_tk = footer_img_tk  # 참조 유지

# 2. 이미지 전용 Frame(서브 캔버스 영역)
img_frame = tk.Frame(window, width=540, height=845, bg="#FFFFFF")
img_frame.place(x=0, y=69)  # 원하는 위치/크기로 조정

# 3. 서브 캔버스 생성
img_canvas = tk.Canvas(img_frame, width=540, height=845, bg="#FFFFFF", bd=0, highlightthickness=0)
img_canvas.pack(side="left", fill="both", expand=True)

# 4. 가로 스크롤바
h_scroll = tk.Scrollbar(img_frame, orient="horizontal", command=img_canvas.xview)
h_scroll.pack(side="bottom", fill="x")
img_canvas.configure(xscrollcommand=h_scroll.set)

# 5. 이미지 삽입
orig_img = Image.open("images/main.png")
img_w, img_h = 897, 845
cur_scale = 1.0
img = orig_img.resize((img_w, img_h))
img_tk = ImageTk.PhotoImage(img)
img_id = img_canvas.create_image(0, 0, anchor="nw", image=img_tk)
img_canvas.config(scrollregion=(0, 0, img_w, img_h))
img_canvas.image = img_tk  # 참조 유지

# 6. 드래그 스크롤
def on_click(event):
    img_canvas.scan_mark(event.x, event.y)
def on_drag(event):
    img_canvas.scan_dragto(event.x, event.y, gain=1)
img_canvas.tag_bind(img_id, "<ButtonPress-1>", on_click)
img_canvas.tag_bind(img_id, "<B1-Motion>", on_drag)

# 7. 줌 (Shift+휠)
def on_zoom(event):
    global img_tk, cur_scale
    if event.state & 0x0001:
        if event.delta > 0:
            cur_scale *= 1.1
        else:
            cur_scale /= 1.1
        cur_scale = max(0.3, min(cur_scale, 3.0))
        new_w = int(img_w * cur_scale)
        new_h = int(img_h * cur_scale)
        img2 = orig_img.resize((new_w, new_h))
        img_tk = ImageTk.PhotoImage(img2)
        img_canvas.itemconfig(img_id, image=img_tk)
        img_canvas.config(scrollregion=(0, 0, new_w, new_h))
        img_canvas.image = img_tk  # 참조 유지
img_canvas.bind_all("<MouseWheel>", on_zoom)

window.resizable(False, False)
window.mainloop()
